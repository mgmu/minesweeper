* Grid
  Encapsule une liste de cellules de taille largeur * hauteur. Initialement, les
  cellules de la grille sont cachées et ne sont pas minées. 
  On veut:
  - déterminer si Grid contient une cellule à la position donnée
  - récupérer une cellule située à une position donnée
  - miner des cellules à une position donnée
  - récupérer les cellules situées aux positions voisines d'une position donnée

** Placement de mines
   Grille doit être initialisée au préalable.
   Placer N mines sur des cellules choisies aléatoirement.
   procedure:
     positions := randomPositions(N, width, height)
     Pour position dans positions:
         Placer une mine sur la cellule en position
     
** Tests:
   - Construction d'une grille avec un nombre négatif de mines lance une 
   exception.
   - Construction d'une grille avec un nombre de mines supérieur à sa surface 
   lance une exception.
   - Construction d'une grille avec une largeur ou une hauteur négative lance 
   une exception.
   - Grid::cellAt(Position) lance une exception si Grid ne contient pas de
   cellule à la position donnée.
   - Grid::neighborsOf(Position) lance une exception si Grid ne contient pas de
   cellule à la position donnée.

* Cell
  A une Visibility, un drapeau indiquant si la cellule est minée et un compteur
  de mines aux alentours: min = 0 & max = 8. A une position de grille.

** Tests:
   - une cellule a la visibilité donnée en argument à la construction
   - lance une exception si nombre de mines negatifs

* Visibility
  Définit l'état de visibilité de la tuile: révélée, marquée ou cachée.
  Etat initial: cachée
  Transitions:
  - [cachée] -> [marquée] [révélée]
  - [marquée] -> [cachée]
  - [révélée] -> []

* Position
  Encapsule des coordonnées dans une matrice, ne peut pas être négative:
  (0, 0) (0, 1) ...
  (1, 0) (1, 1) ...
    .
    .
    .

  On veut pouvoir déterminer les positions voisines d'une position:
  hors bords (i = 0 || j = 0)
  (i, j) -> (i-1, j-1) (i-1, j) (i-1, j+1)
            (  i, j-1)          (  i, j+1)
            (i+1, j-1) (i+1, j) (i+1, j+1)

** Génération de positions aléatoires
   Générer N positions aléatoires entre [0, maxLine[ et [0, maxColumn[ toutes 
   différentes

   procedure:
     positions := []
     Pour i de 0 à N:
         p := null
         Faire
             i := entier aléatoire dans [0, maxLine[
             j := entier aléatoire dans [0, maxColumn[
             p := Position(i, j)
         Tant que positions contient p
         Ajouter p à positions
             
   
** Tests
   - la construction d'une position à des coordonnées négatives lancent une 
   exception
   - pour (0, 0), les positions voisines sont au nombre de 3 et sont: (0, 1),
   (1, 1) et (1, 0).
   - pour tout i > 0 et j = 0, les positions voisines sont au nombre de 5 et 
   sont: (i-1, j), (i-1, j+1), (i, j+1), (i+1, j+1), (i+1, j)
   - pour tout j > 0 et i = 0, les positions voisines sont au nombre de 5 et
   sont: (i, j+1), (i+1, j+1), (i+1, j), (i+1, j-1), (i, j-1)
   - pour tout les autres cas, il y en a 8 et sont: (i-1, j-1), (i-1, j), 
   (i-1, j+1), (i, j+1), (i+1, j+1), (i+1, j), (i+1, j-1), (i, j-1)
   - génération d'un nombre négatif de positions lance une exception
   - génération de positions avec des bornes supérieurs négatives ou égales à 0
   lance une exception
